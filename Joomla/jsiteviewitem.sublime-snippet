<snippet>
	<content><![CDATA[/**
 * HTML ${1:Hello} View class for the ${2:${TM_PROJECT/(.+)/\u\1/g}} component
 *
 * @static
 * @package     ${2/(.+)/\u\1/g}
 * @subpackage  com_${2/(.+)/\L\1/g}
 * @since       ${3:${TM_VERSION}}
 */
class ${2/(.+)/\u\1/g}View${1/(.+)/\u\1/g} extends JViewLegacy
{
	protected \$state;

	protected \$item;

	protected \$print;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  JError object on failure, void on success.
	 *
	 * @since   $3
	 */
	public function display(\$tpl = null)
	{
		// Initialise variables.
		\$app   = JFactory::getApplication();
		\$user  = JFactory::getUser();
		\$dispatcher = JDispatcher::getInstance();

		// Get view related request variables.
		\$print = JRequest::getBool('print');

		// Get model data.
		\$state = \$this->get('State');
		\$item  = \$this->get('Item');

		if (\$item)
		{
			// Get Category Model data
			\$categoryModel = JModelLegacy::getInstance('Category', '${2/(.+)/\u\1/g}Model', array('ignore_request' => true));
			\$categoryModel->setState('category.id', \$item->catid);
			\$categoryModel->setState('list.ordering', 'a.name');
			\$categoryModel->setState('list.direction', 'asc');

			\$items = \$categoryModel->getItems();
		}

		// Check for errors.
		// @TODO Maybe this could go into JComponentHelper::raiseErrors(\$this->get('Errors'))
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseWarning(500, implode("\n", \$errors));

			return false;
		}

		// Add router helpers.
		\$item->slug = \$item->alias ? (\$item->id . ':' . \$item->alias) : \$item->id;
		\$item->catslug = \$item->category_alias ? (\$item->catid . ':' . \$item->category_alias) : \$item->catid;
		\$item->parent_slug = \$item->category_alias ? (\$item->parent_id . ':' . \$item->parent_alias) : \$item->parent_id;

		// Check if cache directory is writeable
		\$cacheDir = JPATH_CACHE . '/';

		if (!is_writable(\$cacheDir))
		{
			JError::raiseNotice('0', JText::_('COM_${2/(.+)/\U\1/g}_CACHE_DIRECTORY_UNWRITABLE'));

			return;
		}

		// Merge ${1/(.+)/\L\1/g} params. If this is single-${1/(.+)/\L\1/g} view, menu params override ${1/(.+)/\L\1/g} params
		// Otherwise, ${1/(.+)/\L\1/g} params override menu item params
		\$params = \$state->get('params');
		\$${1/(.+)/\L\1/g}_params = clone \$item->params;
		\$active = \$app->getMenu()->getActive();
		\$temp = clone (\$params);

		// Check to see which parameters should take priority
		if (\$active)
		{
			\$currentLink = \$active->link;

			// If the current view is the active item and an ${1/(.+)/\L\1/g} view for this ${1/(.+)/\L\1/g}, then the menu item params take priority
			if (strpos(\$currentLink, 'view=${1/(.+)/\L\1/g}') && (strpos(\$currentLink, '&id=' . (string) \$item->id)))
			{
				// \$item->params are the ${1/(.+)/\L\1/g} params, \$temp are the menu item params
				// Merge so that the menu item params take priority
				\$${1/(.+)/\L\1/g}_params->merge(\$temp);
				\$item->params = \$${1/(.+)/\L\1/g}_params;

				// Load layout from active query (in case it is an alternative menu item)
				if (isset(\$active->query['layout']))
				{
					\$this->setLayout(\$active->query['layout']);
				}
			}
			else
			{
				// Current view is not a single ${1/(.+)/\L\1/g}, so the ${1/(.+)/\L\1/g} params take priority here
				// Merge the menu item params with the ${1/(.+)/\L\1/g} params so that the ${1/(.+)/\L\1/g} params take priority
				\$temp->merge(\$${1/(.+)/\L\1/g}_params);
				\$item->params = \$temp;

				// Check for alternative layouts (since we are not in a single-${1/(.+)/\L\1/g} menu item)
				if (\$layout = \$item->params->get('${1/(.+)/\L\1/g}_layout'))
				{
					\$this->setLayout(\$layout);
				}
			}
		}
		else
		{
			// Merge so that ${1/(.+)/\L\1/g} params take priority
			\$temp->merge(\$${1/(.+)/\L\1/g}_params);
			\$item->params = \$temp;

			// Check for alternative layouts (since we are not in a single-${1/(.+)/\L\1/g} menu item)
			if (\$layout = \$item->params->get('${1/(.+)/\L\1/g}_layout'))
			{
				\$this->setLayout(\$layout);
			}
		}

		\$offset = \$state->get('list.offset');

		// Check the access to the ${1/(.+)/\L\1/g}
		\$levels = \$user->getAuthorisedViewLevels();

		if (!in_array(\$item->access, \$levels) or ((in_array(\$item->access, \$levels) and (!in_array(\$item->category_access, \$levels)))))
		{
			JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));

			return;
		}

		// Get the current menu item
		\$menus  = \$app->getMenu();
		\$menu   = \$menus->getActive();
		\$params = \$app->getParams();

		// Get the ${1/(.+)/\L\1/g}
		\$${1/(.+)/\L\1/g} = \$item;

		\$temp = new JRegistry;
		\$temp->loadString(\$item->params);
		\$params->merge(\$temp);

		// Escape strings for HTML output
		\$this->pageclass_sfx = htmlspecialchars(\$params->get('pageclass_sfx'));

		\$this->assignRef('params', \$params);
		\$this->assignRef('${1/(.+)/\L\1/g}', \$${1/(.+)/\L\1/g});
		\$this->assignRef('state', \$state);
		\$this->assignRef('item', \$item);
		\$this->assignRef('user', \$user);
		\$this->print = \$print;

		\$this->_prepareDocument();

		parent::display(\$tpl);
	}

	/**
	 * Prepares the document
	 *
	 * @return  void
	 *
	 * @since   $3
	 */
	protected function _prepareDocument()
	{
		\$app     = JFactory::getApplication();
		\$menus   = \$app->getMenu();
		\$pathway = \$app->getPathway();
		\$title   = null;

		// Because the application sets a default page title,
		// we need to get it from the menu item itself
		\$menu = \$menus->getActive();
		if (\$menu)
		{
			\$this->params->def('page_heading', \$this->params->get('page_title', \$menu->title));
		}
		else
		{
			\$this->params->def('page_heading', JText::_('COM_${2/(.+)/\U\1/g}_DEFAULT_PAGE_TITLE'));
		}

		\$title = \$this->params->get('page_title', '');

		\$id = (int) @\$menu->query['id'];

		// If the menu item does not concern this ${1/(.+)/\L\1/g}
		if (\$menu && (\$menu->query['option'] != 'com_${2/(.+)/\L\1/g}' || \$menu->query['view'] != '${1/(.+)/\L\1/g}' || \$id != \$this->item->id))
		{
			// If this is not a single ${1/(.+)/\L\1/g} menu item, set the page title to the ${1/(.+)/\L\1/g} title
			if (\$this->item->name)
			{
				\$title = \$this->item->name;
			}

			\$path = array(array('title' => \$this->item->name, 'link' => ''));
			\$category = JCategories::getInstance('${2/(.+)/\u\1/g}')->get(\$this->item->catid);

			while ((\$menu->query['option'] != 'com_${2/(.+)/\L\1/g}' || \$menu->query['view'] == '${1/(.+)/\L\1/g}' || \$id != \$category->id) && \$category->id > 1)
			{
				\$path[] = array('title' => \$category->title, 'link' => ${2/(.+)/\u\1/g}HelperRoute::getCategoryRoute(\$category->id));
				\$category = \$category->getParent();
			}

			\$path = array_reverse(\$path);

			foreach (\$path as \$item)
			{
				\$pathway->addItem(\$item['title'], \$item['link']);
			}
		}

		if (empty(\$title))
		{
			\$title = \$app->getCfg('sitename');
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 1)
		{
			\$title = JText::sprintf('JPAGETITLE', \$app->getCfg('sitename'), \$title);
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 2)
		{
			\$title = JText::sprintf('JPAGETITLE', \$title, \$app->getCfg('sitename'));
		}

		if (empty(\$title))
		{
			\$title = \$this->item->name;
		}
		\$this->document->setTitle(\$title);

		if (\$this->item->metadesc)
		{
			\$this->document->setDescription(\$this->item->metadesc);
		}
		elseif (!\$this->item->metadesc && \$this->params->get('menu-meta_description'))
		{
			\$this->document->setDescription(\$this->params->get('menu-meta_description'));
		}

		if (\$this->item->metakey)
		{
			\$this->document->setMetadata('keywords', \$this->item->metakey);
		}
		elseif (!\$this->item->metakey && \$this->params->get('menu-meta_keywords'))
		{
			\$this->document->setMetadata('keywords', \$this->params->get('menu-meta_keywords'));
		}

		if (\$this->params->get('robots'))
		{
			\$this->document->setMetadata('robots', \$this->params->get('robots'));
		}

		if (\$app->getCfg('MetaTitle') == '1')
		{
			\$this->document->setMetaData('title', \$this->item->name);
		}

		if (\$app->getCfg('MetaAuthor') == '1')
		{
			\$this->document->setMetaData('author', \$this->item->author);
		}

		\$mdata = \$this->item->metadata->toArray();

		foreach (\$mdata as \$k => \$v)
		{
			if (\$v)
			{
				\$this->document->setMetadata(\$k, \$v);
			}
		}
	}
}

]]></content>
	<tabTrigger>jsiteviewitem</tabTrigger>
</snippet>
