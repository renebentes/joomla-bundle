<snippet>
	<content><![CDATA[jimport('joomla.application.component.controllerform');

/**
 * ${1:Hello} Controller
 *
 * @package     ${2:${TM_PROJECT/(.+)/\u\1/g}}
 * @subpackage  com_${2/(.+)/\L\1/g}
 * @since       ${3:${TM_VERSION}}
 */
class ${2/(.+)/\u\1/g}Controller${1/(.+)/\u\1/g} extends JControllerForm
{
	protected \$view_item = '${4:form}';

	protected \$view_list = '${5:categories}';

	/**
	 * Method to add a new record.
	 *
	 * @return  boolean  True if the article can be added, false if not.
	 *
	 * @since   $3
	 */
	public function add()
	{
		if (!parent::add())
		{
			// Redirect to the return page.
			\$this->setRedirect(\$this->getReturnPage());
		}
	}

	/**
	 * Method override to check if you can add a new record.
	 *
	 * @param   array  \$data  An array of input data.
	 *
	 * @return  boolean
	 *
	 * @since   $3
	 */
	protected function allowAdd(\$data = array())
	{
		// Initialise variables.
		\$user       = JFactory::getUser();
		\$categoryId = JArrayHelper::getValue(\$data, 'catid', JRequest::getInt('id'), 'int');
		\$allow      = null;

		if (\$categoryId)
		{
			// If the category has been passed in the URL check it.
			\$allow = \$user->authorise('core.create', \$this->option . '.category.' . \$categoryId);
		}

		if (\$allow === null)
		{
			// In the absense of better information, revert to the component permissions.
			return parent::allowAdd(\$data);
		}
		else
		{
			return \$allow;
		}
	}

	/**
	 * Method to check if you can add a new record.
	 *
	 * @param   array   \$data  An array of input data.
	 * @param   string  \$key   The name of the key for the primary key.
	 *
	 * @return  boolean
	 *
	 * @since   $3
	 */
	protected function allowEdit(\$data = array(), \$key = 'id')
	{
		// Initialise variables.
		\$recordId = (int) isset(\$data[\$key]) ? \$data[\$key] : 0;
		\$user	= JFactory::getUser();
		\$userId	= \$user->get('id');
		\$asset		= 'com_${2/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.'.\$recordId;

		// Check general edit permission first.
		if (\$user->authorise('core.edit', \$asset))
		{
			return true;
		}

		// Fallback on edit.own.
		// First test if the permission is available.
		if (\$user->authorise('core.edit.own', \$asset))
		{
			// Now test the owner is the user.
			\$ownerId = (int) isset(\$data['created_by']) ? \$data['created_by'] : 0;
			if (empty(\$ownerId) && \$recordId)
			{
				// Need to do a lookup from the model.
				\$record = \$this->getModel()->getItem(\$recordId);

				if (empty(\$record))
				{
					return false;
				}

				\$ownerId = \$record->created_by;
			}

			// If the owner matches 'me' then do the test.
			if (\$ownerId == \$userId)
			{
				return true;
			}
		// Since there is no asset tracking, revert to the component permissions.
		return parent::allowEdit(\$data, \$key);
	}

	/**
	 * Method to cancel an edit.
	 *
	 * @param   string  \$key  The name of the primary key of the URL variable.
	 *
	 * @return  Boolean  True if access level checks pass, false otherwise.
	 *
	 * @since   $3
	 */
	public function cancel(\$key = '${2/(.)(.+)/\L\1/g}_id')
	{
		parent::cancel(\$key);

		// Redirect to the return page.
		\$this->setRedirect(\$this->getReturnPage());
	}

	/**
	 * Method to edit an existing record.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).
	 *
	 * @return  Boolean	True if access level check and checkout passes, false otherwise.
	 *
	 * @since   $3
	 */
	public function edit(\$key = null, \$urlVar = '${2/(.)(.+)/\L\1/g}_id')
	{
		\$result = parent::edit(\$key, \$urlVar);

		return \$result;
	}

	/**
	 * Method to get a model object, loading it if required.
	 *
	 * @param   string  \$name    The model name. Optional.
	 * @param   string  \$prefix  The class prefix. Optional.
	 * @param   array   \$config  Configuration array for model. Optional.
	 *
	 * @return  object  The model.
	 *
	 * @since   $3
	 */
	public function getModel(\$name = '${4/(.+)/\u\1/g}', \$prefix = '', \$config = array('ignore_request' => true))
	{
		\$model = parent::getModel(\$name, \$prefix, \$config);

		return \$model;
	}

	/**
	 * Gets the URL arguments to append to an item redirect.
	 *
	 * @param   int     \$recordId  The primary key id for the item.
	 * @param   string  \$urlVar    The name of the URL variable for the id.
	 *
	 * @return  string  The arguments to append to the redirect URL.
	 *
	 * @since   $3
	 */
	protected function getRedirectToItemAppend(\$recordId = null, \$urlVar = null)
	{
		\$append = parent::getRedirectToItemAppend(\$recordId, \$urlVar);
		\$itemId = JRequest::getInt('Itemid');
		\$return = \$this->getReturnPage();

		if (\$itemId)
		{
			\$append .= '&Itemid=' . \$itemId;
		}

		if (\$return)
		{
			\$append .= '&return=' . base64_encode(\$return);
		}

		return \$append;
	}

	/**
	 * Get the return URL.
	 *
	 * If a "return" variable has been passed in the request
	 *
	 * @return  string  The return URL.
	 *
	 * @since   $3
	 */
	protected function getReturnPage()
	{
		\$return = JRequest::getVar('return', null, 'default', 'base64');

		if (empty(\$return) || !JUri::isInternal(base64_decode(\$return)))
		{
			return JURI::base();
		}
		else
		{
			return base64_decode(\$return);
		}
	}

	/**
	 * Function that allows child controller access to model data after the data has been saved.
	 *
	 * @param   JModel  &\$model     The data model object.
	 * @param   array   \$validData  The validated data.
	 *
	 * @return  void
	 *
	 * @since   $3
	 */
	protected function postSaveHook(JModel &\$model, \$validData = array())
	{
		\$task = \$this->getTask();

		if (\$task == 'save')
		{
			\$this->setRedirect(JRoute::_('index.php?option=com_${2/(.+)/\L\1/g}&view=category&id=' . \$validData['catid'], false));
		}
	}

	/**
	 * Method to save a record.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).
	 *
	 * @return  Boolean  True if successful, false otherwise.
	 *
	 * @since   $3
	 */
	public function save(\$key = null, \$urlVar = '${2/(.)(.+)/\L\1/g}_id')
	{
		\$result = parent::save(\$key, \$urlVar);

		// If ok, redirect to the return page.
		if (\$result)
		{
			\$this->setRedirect(\$this->getReturnPage());
		}

		return \$result;
	}
}
]]>
	</content>
	<tabTrigger>jsitecontrollerform</tabTrigger>
</snippet>
