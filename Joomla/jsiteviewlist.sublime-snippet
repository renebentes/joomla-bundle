<snippet>
	<content><![CDATA[/**
 * HTML View class for a list of ${1:hellos}.
 *
 * @package     ${2:${TM_PROJECT}}
 * @subpackage  com_${2/(.+)/\L\1/g}
 * @since       ${3:${TM_VERSION}}
 */
class ${2/(.+)/\u\1/g}View${1/(.+)/\u\1/g} extends JViewLegacy
{
	protected \$state;

	protected \$items;

	protected \$category;

	protected \$categories;

	protected \$pagination;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  False on error, null otherwise.
	 *
	 * @since   $3
	 */
	public function display(\$tpl = null)
	{
		\$app        = JFactory::getApplication();
		\$params     = \$app->getParams();

		// Get some data from the models
		\$state      = \$this->get('State');
		\$items      = \$this->get('Items');
		\$category   = \$this->get('Category');
		\$children   = \$this->get('Children');
		\$parent     = \$this->get('Parent');
		\$pagination = \$this->get('Pagination');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseWarning(500, implode("\n", \$errors));
			return false;
		}

		// Check whether category access level allows access.
		\$user   = JFactory::getUser();
		\$groups = \$user->getAuthorisedViewLevels();

		// Prepare the data.
		// Compute the ${1/(.+)(s\b)/\L\1/g} slug.
		for (\$i = 0, \$n = count(\$items); \$i < \$n; \$i++)
		{
			\$item = &\$items[\$i];

			// Add router helpers.
			\$item->slug = \$item->alias ? (\$item->id . ':' . \$item->alias) : \$item->id;
			\$item->catslug = \$item->category_alias ? (\$item->catid . ':' . \$item->category_alias) : \$item->catid;
			\$item->link = JRoute::_(${2/(.+)/\u\1/g}HelperRoute::get${2/(.+)(s\b)/\u\1/g}Route(\$item->slug, \$item->catslug));

			\$temp = new JRegistry;
			\$temp->loadString(\$item->params);
			\$item->params = clone(\$params);
			\$item->params->merge(\$temp);
		}

		// Escape strings for HTML output
		\$this->pageclass_sfx = htmlspecialchars(\$params->get('pageclass_sfx'));
		\$maxLevel = \$params->get('maxLevel', -1);
		\$this->assignRef('maxLevel',   \$maxLevel);
		\$this->assignRef('state',      \$state);
		\$this->assignRef('items',      \$items);
		\$this->assignRef('category',   \$category);
		\$this->assignRef('children',   \$children);
		\$this->assignRef('params',     \$params);
		\$this->assignRef('parent',     \$parent);
		\$this->assignRef('pagination', \$pagination);

		\$this->_prepareDocument();

		parent::display(\$tpl);
	}

	/**
	 * Prepares the document
	 *
	 * @return  void
	 *
	 * @since   $3
	 */
	protected function _prepareDocument()
	{
		\$app     = JFactory::getApplication();
		\$menus   = \$app->getMenu();
		\$pathway = \$app->getPathway();
		\$title   = null;

		// Because the application sets a default page title,
		// we need to get it from the menu item itself
		\$menu = \$menus->getActive();

		if (\$menu)
		{
			\$this->params->def('page_heading', \$this->params->get('page_title', \$menu->title));
		}
		else
		{
			\$this->params->def('page_heading', JText::_('COM_${2/(.+)/\U\1/g}_DEFAULT_PAGE_TITLE'));
		}

		\$id = (int) @\$menu->query['id'];

		\$title = \$this->params->get('page_title', '');

		if (empty(\$title))
		{
			\$title = \$app->getCfg('sitename');
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 1)
		{
			\$title = JText::sprintf('JPAGETITLE', \$app->getCfg('sitename'), \$title);
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 2)
		{
			\$title = JText::sprintf('JPAGETITLE', \$title, \$app->getCfg('sitename'));
		}

		\$this->document->setTitle(\$title);

		if (\$this->params->get('menu-meta_description'))
		{
			\$this->document->setDescription(\$this->params->get('menu-meta_description'));
		}

		if (\$this->params->get('menu-meta_keywords'))
		{
			\$this->document->setMetadata('keywords', \$this->params->get('menu-meta_keywords'));
		}

		if (\$this->params->get('robots'))
		{
			\$this->document->setMetadata('robots', \$this->params->get('robots'));
		}
	}
}

]]></content>
	<tabTrigger>jsiteviewlist</tabTrigger>
</snippet>
