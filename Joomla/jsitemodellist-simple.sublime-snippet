<snippet>
	<content><![CDATA[jimport('joomla.application.component.modellist');

/**
 * ${1:${TM_PROJECT/(.+)/\u\1/g}} Component ${2:Hellos} Model
 *
 * @package     ${1/(.+)/\u\1/g}
 * @subpackage  com_${1/(.+)/\L\1/g}
 * @since       ${3:${TM_VERSION}}
 */
class ${1/(.+)/\u\1/g}Model${2/(.+)/\u\1/g} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $3
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${4:name}', 'a.${4/(.+)(s\b)/\L\1/g}',
				'published', 'a.published',
				'ordering', 'a.ordering',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to get a list of items.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 *
	 * @since   $3
	 */
	public function getItems()
	{
		// Invoke the parent getItems method to get the main list
		\$items = parent::getItems();

		return \$items;
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query
	 *
	 * @since   $3
	 */
	protected function getListQuery()
	{
		\$user   = JFactory::getUser();

		// Create a new query object.
		\$db     = \$this->getDbo();
		\$query  = \$db->getQuery(true);

		// Select required fields from the table.
		\$query->select(\$this->getState('list.select', 'a.*'));
		\$query->from(\$db->quoteName('#__${1/(.+)/\L\1/g}_${2/(.+)/\L\1/g}') . ' AS a');

		// Filter by published state
		\$published = \$this->getState('filter.published');

		if (is_numeric(\$published))
		{
			\$query->where('a.published = ' . (int) \$published);
		}

		// Add the list ordering clause.
		\$query->order(\$db->escape(\$this->getState('list.ordering', 'a.ordering')) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		return \$query;
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $3
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Initialise variables.
		\$app    = JFactory::getApplication();
		\$params = JComponentHelper::getParams('com_${1/(.+)/\L\1/g}');

		// List state information
		\$limit = \$app->getUserStateFromRequest('global.list.limit', 'limit', \$app->getCfg('list_limit'), 'uint');
		\$this->setState('list.limit', \$limit);

		\$limitstart = JRequest::getUInt('limitstart', 0);
		\$this->setState('list.start', \$limitstart);

		\$orderCol = JRequest::getCmd('filter_order', 'ordering');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		\$listOrder = JRequest::getCmd('filter_order_Dir', 'ASC');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		// Get the user object.
		\$user = JFactory::getUser();

		if ((!\$user->authorise('core.edit.state', 'com_${1/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${1/(.+)/\L\1/g}')))
		{
			// Limit to published for people who can't edit or edit.state.
			\$this->setState('filter.published', 1);
		}

		// Load the parameters.
		\$this->setState('params', \$params);
	}
}

]]></content>
	<tabTrigger>jsitemodellistsimple</tabTrigger>
</snippet>
