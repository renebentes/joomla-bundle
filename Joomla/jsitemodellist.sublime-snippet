<snippet>
	<content><![CDATA[jimport('joomla.application.component.modellist');

/**
 * ${1:${TM_PROJECT/(.+)/\u\1/g}} Component ${2:Hellos} Model
 *
 * @package     ${1/(.+)/\u\1/g}
 * @subpackage  com_${1/(.+)/\L\1/g}
 * @since       ${3:${TM_VERSION}}
 */
class ${1/(.+)/\u\1/g}Model${2/(.+)/\u\1/g} extends JModelList
{
	/**
	 * Category items data
	 *
	 * @var     array
	 */
	protected \$_item = null;

	protected \$_articles = null;

	protected \$_siblings = null;

	protected \$_children = null;

	protected \$_parent = null;

	/**
	 * The category that applies.
	 *
	 * @access  protected
	 * @var     object
	 */
	protected \$_category = null;

	/**
	 * The list of other ${2/(.+)(s\b)/\L\1/g} categories.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_categories = null;

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $3
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${4:name}', 'a.${4/(.+)(s\b)/\L\1/g}',
				'published', 'a.published',
				'ordering', 'a.ordering',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to get a list of items.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 *
	 * @since   $3
	 */
	public function getItems()
	{
		// Invoke the parent getItems method to get the main list
		\$items = parent::getItems();

		// Convert the params field into an object, saving original in _params
		for (\$i = 0, \$n = count(\$items); \$i < \$n; \$i++)
		{
			\$item = &\$items[\$i];

			if (!isset(\$this->_params))
			{
				\$params = new JRegistry;
				\$params->loadString(\$item->params);
				\$item->params = \$params;
			}
		}

		return \$items;
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query
	 *
	 * @since   $3
	 */
	protected function getListQuery()
	{
		\$user   = JFactory::getUser();
		\$groups = implode(',', \$user->getAuthorisedViewLevels());

		// Create a new query object.
		\$db     = \$this->getDbo();
		\$query  = \$db->getQuery(true);

		// Select required fields from the categories.
		\$query->select(\$this->getState('list.select', 'a.*'));
		\$query->from(\$db->quoteName('#__${1/(.+)/\L\1/g}_${5:hello}') . ' AS a');
		\$query->where('a.access IN (' . \$groups . ')');
		\$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access');
		\$query->join('INNER', '#__categories AS c ON c.id = a.catid');
		\$query->where('c.access IN (' . \$groups . ')');

		// Filter by category.
		if (\$categoryId = \$this->getState('category.id'))
		{
			\$query->where('a.catid = ' . (int) \$categoryId);
		}

		// Sqlsrv change... aliased c.published to cat_published
		// Join to check for category published state in parent categories up the tree
		\$query->select('c.published as cat_published, CASE WHEN badcats.id is null THEN c.published ELSE 0 END AS parents_published');
		\$subquery = 'SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';
		\$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';
		\$subquery .= 'WHERE parent.extension = ' . \$db->quote('com_${1/(.+)/\L\1/g}');

		// Find any up-path categories that are not published
		// If all categories are published, badcats.id will be null, and we just use the ${1/(.+)(s\b)/\L\1/g} state
		\$subquery .= ' AND parent.published != 1 GROUP BY cat.id ';

		// Select state to unpublished if up-path category is unpublished
		\$publishedWhere = 'CASE WHEN badcats.id is null THEN a.published ELSE 0 END';
		\$query->join('LEFT OUTER', '(' . \$subquery . ') AS badcats ON badcats.id = c.id');

		// Filter by published state
		\$published = \$this->getState('filter.published');

		if (is_numeric(\$published))
		{
			\$query->where('a.published = ' . (int) \$published);

			// Filter by start and end dates.
			\$nullDate = \$db->Quote(\$db->getNullDate());
			\$date = JFactory::getDate();
			\$nowDate = \$db->Quote(\$date->toSql());
			\$query->where('(a.publish_up = ' . \$nullDate . ' OR a.publish_up <= ' . \$nowDate . ')');
			\$query->where('(a.publish_down = ' . \$nullDate . ' OR a.publish_down >= ' . \$nowDate . ')');
			\$query->where(\$publishedWhere . ' = ' . (int) \$published);
		}

		// Filter by language
		if (\$this->getState('filter.language'))
		{
			\$query->where('a.language in (' . \$db->Quote(JFactory::getLanguage()->getTag()) . ',' . \$db->Quote('*') . ')');
		}

		// Add the list ordering clause.
		\$query->order(\$db->escape(\$this->getState('list.ordering', 'a.ordering')) . ' ' . \$db->escape(\$this->getState('list.direction', 'ASC')));

		return \$query;
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $3
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Initialise variables.
		\$app    = JFactory::getApplication();
		\$params = JComponentHelper::getParams('com_${1/(.+)/\L\1/g}');

		// List state information
		\$limit = \$app->getUserStateFromRequest('global.list.limit', 'limit', \$app->getCfg('list_limit'), 'uint');
		\$this->setState('list.limit', \$limit);

		\$limitstart = JRequest::getUInt('limitstart', 0);
		\$this->setState('list.start', \$limitstart);

		\$orderCol = JRequest::getCmd('filter_order', 'ordering');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		\$listOrder = JRequest::getCmd('filter_order_Dir', 'ASC');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		// Get the user object.
		\$user = JFactory::getUser();

		if ((!\$user->authorise('core.edit.state', 'com_${1/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${1/(.+)/\L\1/g}')))
		{
			// Limit to published for people who can't edit or edit.state.
			\$this->setState('filter.published', 1);

			// Filter by start and end dates.
			\$this->setState('filter.publish_date', true);
		}

		\$this->setState('filter.language', \$app->getLanguageFilter());

		// Load the parameters.
		\$this->setState('params', \$params);
	}
}

]]></content>
	<tabTrigger>jsitemodellist</tabTrigger>
</snippet>
